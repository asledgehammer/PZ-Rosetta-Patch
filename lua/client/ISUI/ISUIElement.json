{
  "$schema": "https://raw.githubusercontent.com/asledgehammer/PZ-Rosetta-Schema/main/rosetta-schema.json",
  "luaClasses": {
    "ISUIElement": {
      "notes": "**ISUIElement** is the base UI class in the **Project Zomboid** Lua codebase.",
      "values": {
        "IDMax": {
          "type": "number",
          "notes": "The next ID to use for a new ISUIElement instance.",
          "defaultValue": "1",
          "nullable": false
        }
      },
      "fields": {
        "anchorBottom": {
          "type": "boolean",
          "notes": "If true, the element is anchored to the bottom of its parent element.",
          "nullable": false
        },
        "anchorLeft": {
          "type": "boolean",
          "notes": "If true, the element is anchored to the left of its parent element.",
          "nullable": false
        },
        "anchorRight": {
          "type": "boolean",
          "notes": "If true, the element is anchored to the right of its parent element.",
          "nullable": false
        },
        "anchorTop": {
          "type": "boolean",
          "notes": "If true, the element is anchored to the top of its parent element.",
          "nullable": false
        },
        "children": {
          "type": "table<number, ISUIElement>",
          "notes": "The registered child elements of the element, registered using self.ID as their key.",
          "nullable": false
        },
        "controller": {
          "type": "any",
          "notes": "Unknown. Not sure if **org.lwjglx.input.Controller**.",
          "nullable": false
        },
        "dock": {
          "type": "string",
          "notes": "Some possibly deprecated legacy field.",
          "nullable": false
        },
        "enabled": {
          "type": "boolean",
          "notes": "If true, the element is active.",
          "nullable": false
        },
        "forceCursorVisible": {
          "type": "boolean",
          "notes": "If true, the cursor will stay visible when inside the element's box-boundary.",
          "nullable": false
        },
        "height": {
          "type": "double",
          "notes": "The height of the UI element. (In pixels)",
          "nullable": false
        },
        "hscroll": {
          "type": "ISScrollBar",
          "notes": "The element's horizontal scrollbar.",
          "nullable": false
        },
        "ID": {
          "type": "int",
          "notes": "The internal ID of the UI element. This is used to store elements in their parent-element's children array.",
          "nullable": false
        },
        "javaObject": {
          "type": "UIElement",
          "notes": "The Java instance of the UI element. This is used to communicate with the game's UI engine.",
          "nullable": false
        },
        "joyfocus": {
          "type": "Joypad",
          "notes": "The actively-focused Joypad object.",
          "nullable": false
        },
        "keepOnScreen": {
          "type": "boolean",
          "notes": "If true, the element will stay on the screen regardless of its state.",
          "nullable": false
        },
        "minimumHeight": {
          "type": "number",
          "notes": "The minimum height of the UI element. (In pixels)",
          "nullable": false
        },
        "minimumWidth": {
          "type": "number",
          "notes": "The minimum width of the UI element. (In pixels)",
          "nullable": false
        },
        "onMouseDoubleClick": {
          "type": "fun(): void",
          "notes": "A callback function for double clicking.",
          "nullable": false
        },
        "parent": {
          "type": "ISUIElement",
          "notes": "If not nil, the parent of the element will be stored here.",
          "nullable": false
        },
        "removed": {
          "type": "boolean",
          "notes": "True if the UI element is flagged for removal from the UI manager.",
          "nullable": false
        },
        "scrollwidth": {
          "type": "number",
          "notes": "The set scroll-width of the element's scroll pane.",
          "nullable": false
        },
        "target": {
          "type": "any",
          "notes": "(Related to 'onMouseDoubleClick')",
          "nullable": false
        },
        "visibleFunction": {
          "type": "fun(visibleTarget: ISUIElement, fromElement: ISUIElement): void;",
          "notes": "An optional function to be invoked when self.setVisible() is invoked. Passes two ISUIElements as parameters.",
          "nullable": false
        },
        "visibleTarget": {
          "type": "ISUIElement",
          "notes": "The element-target or reference to self.visibleFunction when the visibility of the element is changed.",
          "nullable": false
        },
        "vscroll": {
          "type": "ISScrollBar",
          "notes": "The element's vertical scrollbar.",
          "nullable": false
        },
        "wantKeyEvents": {
          "type": "boolean",
          "notes": "If true, keyboard-events are broadcasted to the element.",
          "nullable": false
        },
        "width": {
          "type": "number",
          "notes": "The width of the UI element. (In pixels)",
          "nullable": false
        },
        "x": {
          "type": "number",
          "notes": "The x coordinate on the screen. (In pixels)",
          "nullable": false
        },
        "y": {
          "type": "number",
          "notes": "The y coordinate on the screen. (In pixels)",
          "nullable": false
        }
      },
      "constructor": {
        "parameters": [
          {
            "name": "x",
            "type": "number",
            "notes": "The x coordinate on the screen. (In pixels)",
            "optional": false,
            "nullable": false
          },
          {
            "name": "y",
            "type": "number",
            "notes": "The y coordinate on the screen. (In pixels)",
            "optional": false,
            "nullable": false
          },
          {
            "name": "width",
            "type": "number",
            "notes": "The width of the UI element. (In pixels)",
            "optional": false,
            "nullable": false
          },
          {
            "name": "height",
            "type": "number",
            "notes": "The height of the UI element. (In pixels)",
            "optional": false,
            "nullable": false
          }
        ]
      },
      "methods": {
        "addChild": {
          "notes": "Adds a child UI element to this UI element.",
          "parameters": [
            {
              "name": "other",
              "type": "ISUIElement",
              "notes": "The UI element to add as a child to this UI element.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "addScrollBars": {
          "notes": "Adds a vertical ISScrollBar to the UI element.",
          "parameters": [
            {
              "name": "addHorizontal",
              "type": "boolean",
              "notes": "If true, the ISUIElement will also have a horizontal scrollbar.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "addToUIManager": {
          "notes": "Adds this UI element to the UI manager for the game.",
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "backMost": {
          "notes": "Moves the element to the back-most drawn on the stack of elements to render.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "bringToTop": {
          "notes": "Brings the element to the top of the rendering stack.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "clampStencilRectToParent": {
          "notes": "If the element has a parent, set the stencil box-boundary of the element to its parent.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The left-most x-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The top-most y-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the stencil. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the stencil. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "[number, number, number, number]",
            "notes": "x, y, width, height",
            "nullable": false
          }
        },
        "clearChildren": {
          "notes": "Clears all registered child-elements from the element.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "clearMaxDrawHeight": {
          "notes": "Clears the maximum draw height of the element.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "clearMaxDrawWidth": {
          "notes": "Clears the maximum draw width of the element.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "clearStencilRect": {
          "notes": "Clears the set box-boundary for the element.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "containsPoint": {
          "notes": "Tests if the given coordinates are inside the element's box-boundary.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate to test. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate to test. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "True if the coordinates are inside the element's box-boundary.",
            "nullable": false
          }
        },
        "containsPointLocal": {
          "notes": "Tests if the given coordinates are inside the element's local box-boundary. (the top-left of the element is 0,0)",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate to test. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate to test. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "True if the coordinates are inside the element's local box-boundary.",
            "nullable": false
          }
        },
        "createChildren": {
          "notes": "Fired when the element is instantiated. Create initial child elements here.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawLine2": {
          "notes": "Draws a line between two points on the screen. (In pixels)",
          "parameters": [
            {
              "name": "x1",
              "type": "number",
              "notes": "The x-coordinate of the starting point of the line. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y1",
              "type": "number",
              "notes": "The y-coordinate of the starting point of the line. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x2",
              "type": "number",
              "notes": "The x-coordinate of the ending point of the line. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y2",
              "type": "number",
              "notes": "The y-coordinate of the ending point of the line. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawProgressBar": {
          "notes": "Draws a progress bar in the element.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left of the progress-bar. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The x-coordinate of the top-left of the progress-bar. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the progress-bar. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the progress-bar. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "percentage",
              "type": "number",
              "notes": "A value between 0.0 (0%) to 1.0. (100%)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "foregroundColor",
              "type": "ProgressBarColor",
              "notes": "A primitive RGBA object to color the foreground.  ",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawRect": {
          "notes": "Draws a colored rectangle at given coordinates on the screen. (In pixels)\\n\\nSimplified alias of:\\n**self.javaObject:DrawTextureScaledColor(nil, x, y, w, h, r, g, b, a);**",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawRectBorder": {
          "notes": "TODO: Document.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawRectBorderStatic": {
          "notes": "TODO: Document.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawRectStatic": {
          "notes": "TODO: Document.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawText": {
          "notes": "Draws text on the screen. (The equivalence of a \"drawTextLeft\")",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "notes": "The text to draw.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "font",
              "type": "UIFont",
              "notes": "The font preset to use. (If nil, UIFont.Small is used)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextCentre": {
          "notes": "Draws text on the screen from a coordinate-centric position. (In pixels)",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "notes": "The text to draw.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the center area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the center area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "font",
              "type": "UIFont",
              "notes": "The font preset to use. (If nil, UIFont.Small is used)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextCentreStatic": {
          "notes": "TODO: Document.",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "notes": "The text to draw.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the center area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the center area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "font",
              "type": "UIFont",
              "notes": "The font preset to use. (If nil, UIFont.Small is used)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextRight": {
          "notes": "Draws text on the screen, rendering the text left of the given coordinates on the screen.",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "notes": "The text to draw.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": " The x-coordinate of the top-right area.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": " The y-coordinate of the top-right area.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "font",
              "type": "UIFont",
              "notes": "The font preset to use. (If nil, UIFont.Small is used)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextRightStatic": {
          "notes": "TODO: Document.",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "notes": "The text to draw.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-right area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-right area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "font",
              "type": "UIFont",
              "notes": "The font preset to use. (If nil, UIFont.Small is used)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextStatic": {
          "notes": "TODO: Document.",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "notes": "The text to draw.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "font",
              "type": "UIFont",
              "notes": "The font preset to use. (If nil, UIFont.Small is used)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextUntrimmed": {
          "notes": "Draws text untrimmed on the screen.\\n\\n**NOTE**: If a font is not provided the text is drawn trimmed. (This might be a bug)",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "notes": "The text to draw.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "font",
              "type": "UIFont",
              "notes": "The font preset to use. (If nil, UIFont.Small is used)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTexture": {
          "notes": "Draws a texture on the screen using top-left coordinates and a color multiplier.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "notes": "The texture to draw. If null, the color will be the texture.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x coordinate on the screen to draw the left of the texture. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y coordinate on the screen to draw the top of the texture. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The alpha channel. (Range: 0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The red color channel. (Range: 0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The blue color channel. (Range: 0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The blue color channel. (Range: 0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "drawTextureAllPoint": {
          "notes": "Draws a texture, providing all four points for the GL_QUAD when drawn. (top-left -> top-right -> bottom-right -> bottom-left) If the texture is **nil** then a solid color is rendered. If one is provided then the color values become a color-multiplier.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "notes": "The texture to draw. If **nil** is provided, the color passed is rendered.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "topLeftX",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "topLeftY",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "topRightX",
              "type": "number",
              "notes": "The x-coordinate of the top-right area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "topRightY",
              "type": "number",
              "notes": "The y-coordinate of the top-right area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "bottomRightX",
              "type": "number",
              "notes": "The x-coordinate of the bottom-right area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "bottomRightY",
              "type": "number",
              "notes": "The y-coordinate of the bottom-right area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "bottomLeftX",
              "type": "number",
              "notes": "The x-coordinate of the bottom-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "bottomLeftY",
              "type": "number",
              "notes": "The y-coordinate of the bottom-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "DrawTextureAngle": {
          "notes": "TODO: Document.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "optional": false,
              "nullable": false
            },
            {
              "name": "centerX",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "centerY",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "angle",
              "type": "number",
              "notes": "The angle of rotation. (In degrees)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextureScaled": {
          "notes": "Draws a texture that is scaled to fit a square boundary on the screen using top-left coordinates and provided width and height values. \\n**NOTE**: If the texture is **nil**, the color provided will be rendered in its place.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "notes": "The texture to draw. If **nil** is provided, the color passed is rendered.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextureScaledAspect": {
          "notes": "Draws a scaled texture with proportionate dimensions, scaling from the texture's center-point. This variant uses the texture's original width and height when calculating the aspect ratio to draw.\\n**NOTE**: If the texture is **nil**, nothing will render.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "notes": "The texture to draw.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the center area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the center area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "(Optional) The value of the red color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "(Optional) The value of the green color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "(Optional) The value of the blue color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextureScaledAspect2": {
          "notes": "Draws a scaled texture with proportionate dimensions, scaling from the texture's center-point. This variant uses the texture's width and height instead of the original width and height of the texture when calculating the aspect ratio to draw.\\n**NOTE**: If the texture is **nil**, nothing will render.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "notes": "The texture to draw.\\nNOTE: If the texture is nil, nothing will render.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "(Optional) The value of the red color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "(Optional) The value of the green color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "(Optional) The value of the blue color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextureScaledStatic": {
          "notes": "Draws a texture that is scaled to fit a square boundary on the screen using top-left coordinates and provided width and height values.\\n**NOTE**: If the texture is **nil**, the color provided will be rendered in its place.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "notes": "The texture to draw. If nil is provided, the color passed is rendered.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the area to draw. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "(Optional) The value of the red color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "(Optional) The value of the green color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "(Optional) The value of the blue color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextureScaledUniform": {
          "notes": "Draws a scaled texture with proportionate dimensions using a scale multiplier.\\n**NOTE**: If the texture is **nil**, nothing will render.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "notes": "The texture to draw.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "scale",
              "type": "number",
              "notes": "The scale multiplier. (100% scale is **1.0**)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "(Optional) The value of the red color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "(Optional) The value of the green color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "(Optional) The value of the blue color channel. (0.0 -> 1.0)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextureStatic": {
          "notes": "TODO: Document.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextureTiledX": {
          "notes": "**NOTE**: If red, green, blue, and alpha are not provided, they will be filled as the color **white**.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "optional": true,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextureTiledY": {
          "notes": "**NOTE**: If red, green, blue, and alpha are not provided, they will be filled as the color **white**.",
          "parameters": [
            {
              "name": "texture",
              "type": "Texture",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "optional": true,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "optional": true,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "optional": true,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "drawTextZoomed": {
          "notes": "Draws text on the screen with a scale-factor.",
          "parameters": [
            {
              "name": "text",
              "type": "string",
              "notes": "The text to draw.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the top-left area. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "scale",
              "type": "number",
              "notes": "The scale multiplier. (100% scale is 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "red",
              "type": "number",
              "notes": "The value of the red color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "green",
              "type": "number",
              "notes": "The value of the green color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "blue",
              "type": "number",
              "notes": "The value of the blue color channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "alpha",
              "type": "number",
              "notes": "The value of the alpha channel. (0.0 -> 1.0)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "font",
              "type": "UIFont",
              "notes": "The font preset to use. (If nil, UIFont.Small is used)",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "getAbsoluteX": {
          "returns": {
            "type": "number",
            "notes": "The x-coordinate of the element in screen-space. (In pixels)",
            "nullable": false
          }
        },
        "getAbsoluteY": {
          "returns": {
            "type": "number",
            "notes": "The x-coordinate of the element in screen-space. (In pixels)",
            "nullable": false
          }
        },
        "getBottom": {
          "returns": {
            "type": "number",
            "notes": "The position of the element's x-coordinate plus the element's width. (In pixels)",
            "nullable": false
          }
        },
        "getCentreX": {
          "returns": {
            "type": "number",
            "notes": "The center-most x-coordinate of the element on the screen. (In pixels)",
            "nullable": false
          }
        },
        "getCentreY": {
          "returns": {
            "type": "number",
            "notes": "The center-most y-coordinate of the element on the screen. (In pixels)",
            "nullable": false
          }
        },
        "getChildren": {
          "returns": {
            "type": "ISUIElement[]",
            "notes": "Any child-elements assigned to the element.",
            "nullable": false
          }
        },
        "getController": {
          "returns": {
            "type": "any",
            "notes": "The controller object.",
            "nullable": false
          }
        },
        "getHeight": {
          "returns": {
            "type": "number",
            "notes": "The height of the element. (In pixels)",
            "nullable": false
          }
        },
        "getIsCaptured": {
          "returns": {
            "type": "boolean",
            "notes": "True if the element is set to capture input.",
            "nullable": false
          }
        },
        "getIsFollowGameWorld": {
          "returns": {
            "type": "boolean",
            "notes": "True if the element follows the offset of the world-camera.",
            "nullable": false
          }
        },
        "getIsVisible": {
          "returns": {
            "type": "boolean",
            "notes": "True if the element is visible.",
            "nullable": false
          }
        },
        "getJavaObject": {
          "notes": "This object operates the java-side of the UI engine for Project Zomboid.",
          "returns": {
            "type": "UIElement",
            "notes": "The internal element instance.",
            "nullable": false
          }
        },
        "getKeepOnScreen": {
          "returns": {
            "type": "boolean",
            "notes": "True if the element is set to stay on the screen, even when not active.",
            "nullable": false
          }
        },
        "getMaxDrawHeight": {
          "returns": {
            "type": "number",
            "notes": "The maximum height the element will draw anything.",
            "nullable": false
          }
        },
        "getMaxDrawWidth": {
          "returns": {
            "type": "number",
            "notes": "The maximum width the element will draw anything.",
            "nullable": false
          }
        },
        "getMouseX": {
          "returns": {
            "type": "number",
            "notes": "The mouse's x-coordinate, relative to the left-most x-coordinate of the element on the screen. (In pixels)",
            "nullable": false
          }
        },
        "getMouseY": {
          "returns": {
            "type": "number",
            "notes": "The mouse's y-coordinate, relative to the top-most y-coordinate of the element on the screen. (In pixels)",
            "nullable": false
          }
        },
        "getParent": {
          "returns": {
            "type": "ISUIElement",
            "notes": "The parent element, or **nil** if not assigned a parent.",
            "nullable": false
          }
        },
        "getRenderThisPlayerOnly": {
          "returns": {
            "type": "boolean",
            "notes": "The player's index that should only be rendered. (-1 if not set)",
            "nullable": false
          }
        },
        "getRight": {
          "returns": {
            "type": "number",
            "notes": "The position of the element's x-coordinate plus the element's width. (In pixels)",
            "nullable": false
          }
        },
        "getScrollAreaHeight": {
          "returns": {
            "type": "number",
            "notes": "The accurate height of the element, taking into account the area taken up by the horizontal scrollbar.",
            "nullable": false
          }
        },
        "getScrollAreaWidth": {
          "returns": {
            "type": "number",
            "notes": "The accurate width of the element, taking into account the area taken up by the vertical scrollbar.",
            "nullable": false
          }
        },
        "getScrollChildren": {
          "returns": {
            "type": "boolean",
            "notes": "True if the children of the element should be scrolled.",
            "nullable": false
          }
        },
        "getScrollHeight": {
          "returns": {
            "type": "number",
            "notes": "The height of the scrollbar pane. (In pixels)",
            "nullable": false
          }
        },
        "getScrollWidth": {
          "returns": {
            "type": "number",
            "notes": "The width of the scrollbar pane. (In pixels)",
            "nullable": false
          }
        },
        "getScrollWithParent": {
          "returns": {
            "type": "boolean",
            "notes": "True if the element should be scrolled with its parent element.",
            "nullable": false
          }
        },
        "getUIName": {
          "returns": {
            "type": "string",
            "notes": "The formal UI name for the element.",
            "nullable": false
          }
        },
        "getWidth": {
          "returns": {
            "type": "number",
            "notes": "The width of the element. (In pixels)",
            "nullable": false
          }
        },
        "getX": {
          "returns": {
            "type": "number",
            "notes": "The x-coordinate of the element on the screen. (In pixels)",
            "nullable": false
          }
        },
        "getXScroll": {
          "returns": {
            "type": "number",
            "notes": "The offset of the element's horizontal scrollbar. (In pixels) ",
            "nullable": false
          }
        },
        "getY": {
          "returns": {
            "type": "void",
            "notes": "The y-coordinate of the element on the screen. (In pixels)",
            "nullable": false
          }
        },
        "getYScroll": {
          "returns": {
            "type": "number",
            "notes": "The offset of the element's vertical scrollbar. (In pixels) ",
            "nullable": false
          }
        },
        "ignoreHeightChange": {
          "notes": "Internally sets the element's next updated width value, ignoring the change.",
          "returns": {
            "type": "nil",
            "notes": "**NOTE**: The method returns but nothing is actually returned.",
            "nullable": false
          }
        },
        "ignoreWidthChange": {
          "notes": "Internally sets the element's next updated width value, ignoring the change.",
          "returns": {
            "type": "nil",
            "notes": "**NOTE**: The method returns but nothing is actually returned.",
            "nullable": false
          }
        },
        "initialise": {
          "notes": "Initializes the element, assigning the next value of **ISUIElement.IDMax**.",
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "instantiate": {
          "notes": "Instantiates the internal Java object instance of the element. All initial dimensions are set and children are created.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "isEnabled": {
          "returns": {
            "type": "boolean",
            "notes": "True if the element is set enabled.",
            "nullable": false
          }
        },
        "isFollowGameWorld": {
          "returns": {
            "type": "boolean",
            "notes": "True if the element follows the offset of the world-camera.",
            "nullable": false
          }
        },
        "isMouseOver": {
          "returns": {
            "type": "boolean",
            "notes": "True if the mouse is inside the box boundaries of the element.",
            "nullable": false
          }
        },
        "isReallyVisible": {
          "returns": {
            "type": "boolean",
            "notes": "True if the element ***really*** is visible.",
            "nullable": false
          }
        },
        "isRemoved": {
          "returns": {
            "type": "boolean",
            "notes": "True if the element is flagged for removal on the next update tick.",
            "nullable": false
          }
        },
        "isVisible": {
          "returns": {
            "type": "boolean",
            "notes": "True if the element is visible.",
            "nullable": false
          }
        },
        "isVScrollBarVisible": {
          "returns": {
            "type": "boolean",
            "notes": "True if vertical scrollbars are enabled and the height of the contents of the element are greater than the scrollbar's height.",
            "nullable": false
          }
        },
        "onFocus": {
          "notes": "Triggered when the element is focused from a MouseEvent.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The mouse's x-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The mouse's y-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onGainJoypadFocus": {
          "notes": "Triggered when a joypad gains focus.",
          "parameters": [
            {
              "name": "joypadData",
              "type": "JoypadData",
              "notes": "The joypad.",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onJoypadDirDown": {
          "notes": "Triggered when the down-direction of the arrow-pad of the joypad is pressed.",
          "parameters": [
            {
              "name": "joypadData",
              "type": "JoypadData",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onJoypadDirLeft": {
          "notes": "Triggered when the left-direction of the arrow-pad of the joypad is pressed.",
          "parameters": [
            {
              "name": "joypadData",
              "type": "JoypadData",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onJoypadDirRight": {
          "notes": "Triggered when the right-direction of the arrow-pad of the joypad is pressed.",
          "parameters": [
            {
              "name": "joypadData",
              "type": "JoypadData",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onJoypadDirUp": {
          "notes": "Triggered when the up-direction of the arrow-pad of the joypad is pressed.",
          "parameters": [
            {
              "name": "joypadData",
              "type": "JoypadData",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onJoypadDown": {
          "notes": "Triggered when a button for a focused joypad is pressed. ",
          "parameters": [
            {
              "name": "button",
              "type": "number",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onLoseJoypadFocus": {
          "notes": "Triggered when a focused joypad loses focus.",
          "parameters": [
            {
              "name": "joypadData",
              "type": "JoypadData",
              "notes": "The joypad.",
              "optional": true,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onMouseDownOutside": {
          "notes": "Triggered when the left-mouse-button is pressed outside of the element's box-boundary.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The mouse's x-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The mouse's y-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onMouseMove": {
          "notes": "Triggered when the mouse moves inside the element's box-boundary.",
          "parameters": [
            {
              "name": "deltaX",
              "type": "number",
              "notes": "The delta (b - a), the mouse's x-coordinate moved from the last update. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "deltaY",
              "type": "number",
              "notes": "The delta (b - a), the mouse's y-coordinate moved from the last update. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onMouseMoveOutside": {
          "notes": "Triggered when the mouse moves outside the element's box-boundary.",
          "parameters": [
            {
              "name": "deltaX",
              "type": "number",
              "notes": "The delta (b - a), the mouse's x-coordinate moved from the last update. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "deltaY",
              "type": "number",
              "notes": "The delta (b - a), the mouse's y-coordinate moved from the last update. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onMouseUp": {
          "notes": "Triggered when the left-mouse-button is released over the element.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate of the mouse relative to the element.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate of the mouse relative to the element.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onMouseUpOutside": {
          "notes": "Triggered when the left-mouse-button is released outside of the element's box-boundary.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The mouse's x-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The mouse's y-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onMouseWheel": {
          "notes": "Triggered when the mouse-wheel moves over the element.",
          "parameters": [
            {
              "name": "delta",
              "type": "number",
              "notes": "The change (or offset) of the mouse-wheel. Signage of the value identifies the direction of the mouse-wheel. ",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onResize": {
          "notes": "Triggered when the element resizes.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onRightMouseDown": {
          "notes": "Triggered when the right-mouse-button is pressed inside the element's box-boundary.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The mouse's x-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The mouse's y-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onRightMouseDownOutside": {
          "notes": "Triggered when the right-mouse-button is pressed outside of the element's box-boundary.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The mouse's x-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The mouse's y-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onRightMouseUp": {
          "notes": "Triggered when the right-mouse-button is released inside the element's box-boundary.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The mouse's x-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The mouse's y-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "onRightMouseUpOutside": {
          "notes": "Triggered when the right-mouse-button is released outside of the element's box-boundary.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The mouse's x-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The mouse's y-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "prerender": {
          "notes": "Triggered before rendering the element. All render-based calculations go here.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "recalcSize": {
          "notes": "Triggers **self.javaObject:onResize()**.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "removeChild": {
          "notes": "Removes a child from the element.",
          "parameters": [
            {
              "name": "child",
              "type": "ISUIElement",
              "notes": "The child to remove.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "removeFromUIManager": {
          "notes": "Removes the element reference from the UIManager instance.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "render": {
          "notes": "Triggered when rendering the element. All render calls go here.\\n**NOTE**: This is called in the game's render thread. All render calls fired outside of this call are ignored.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "repaintStencilRect": {
          "notes": "Repaints the stencil at the given box-boundary.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The left-most x-coordinate of the stencil. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The top-most y-coordinate of the stencil. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the stencil. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the stencil. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "resumeStencil": {
          "notes": "Resumes (or starts) the stencil for the set box boundary of the element. Anything drawn through or outside the box boundaries of the element is clipped & stenciled out of the frame buffer.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setAlwaysOnTop": {
          "notes": "Sets the element to render at the top of any stack of elements.",
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "The flag to set.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setAnchorBottom": {
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "If true, the element anchors to the bottom its parent element.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "setAnchorLeft": {
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "If true, the element anchors to the left-side of its parent element.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "setAnchorRight": {
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "If true, the element anchors to the right-side of its parent element.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "setAnchorTop": {
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "If true, the element anchors to the top of its parent element.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "setCapture": {
          "notes": "(Something to do with mouse input capturing)",
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setController": {
          "notes": "Sets the controller object for the element.",
          "parameters": [
            {
              "name": "controller",
              "type": "any",
              "notes": "The controller object.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "setEnabled": {
          "notes": "Sets the enabled-state of the element. If disabled, the element will not update or render either itself or its children.",
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "The flag to set.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setFollowGameWorld": {
          "notes": "Sets the element's flag for following the game's world offset when the player moves their camera.",
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "The flag to set.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setForceCursorVisible": {
          "notes": "Sets whether the cursor is forced to render if over the element.",
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "The flag to set.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setHeight": {
          "notes": "Sets the height of the element on the screen. (In pixels)\\n**NOTE**: If the element is set to stay on the screen, the height is capped.",
          "parameters": [
            {
              "name": "height",
              "type": "number",
              "notes": "The height to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setHeightAndParentHeight": {
          "notes": "Sets the height of the element and all parent elements up to their root element. (In pixels)",
          "parameters": [
            {
              "name": "height",
              "type": "number",
              "notes": "The height to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setMaxDrawHeight": {
          "notes": "Sets the maximum height the element will draw anything.",
          "parameters": [
            {
              "name": "height",
              "type": "number",
              "notes": "The height to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setMaxDrawWidth": {
          "notes": "Sets the maximum width the element will draw anything.",
          "parameters": [
            {
              "name": "width",
              "type": "number",
              "notes": "The height to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setOnMouseDoubleClick": {
          "parameters": [
            {
              "name": "target",
              "type": "ISUIElement",
              "notes": "The target clicked.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "callback",
              "type": "fun(item: ISUIElement): void",
              "notes": "The callback to trigger on the MouseEvent.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setRemoved": {
          "notes": "Sets the element flagged for removal on the next update tick.",
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "The flag to set.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setRenderThisPlayerOnly": {
          "notes": "Sets the player's index that should only be rendered. (-1 if unset)",
          "parameters": [
            {
              "name": "value",
              "type": "number",
              "notes": "The player's index to set. (0 - 3)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setScrollChildren": {
          "notes": "Sets whether the children of the element should be scrolled.",
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "The flag to set.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setScrollHeight": {
          "notes": "Sets the height of the scrollbar pane.",
          "parameters": [
            {
              "name": "value",
              "type": "number",
              "notes": "The value to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setScrollWidth": {
          "notes": "Sets the width of the scrollbar pane.",
          "parameters": [
            {
              "name": "value",
              "type": "number",
              "notes": "The value to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setScrollWithParent": {
          "notes": "Sets whether the element should be scrolled with its parent element.",
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "The flag to set.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setStencilRect": {
          "notes": "Sets the box-boundary of the element's stencil. Anything drawn through or outside this boundary is clipped in the frame buffer.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The left-most x-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "y",
              "type": "number",
              "notes": "The top-most y-coordinate. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "width",
              "type": "number",
              "notes": "The width of the stencil. (In pixels)",
              "optional": false,
              "nullable": false
            },
            {
              "name": "height",
              "type": "number",
              "notes": "The height of the stencil. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setUIName": {
          "notes": "Sets the formal UI name for the element.",
          "parameters": [
            {
              "name": "name",
              "type": "string",
              "notes": "The name to set.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setVisible": {
          "notes": "Sets the element visible. When visible, elements update and render.",
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "The flag to set.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setWantKeyEvents": {
          "notes": "Sets whether the element should receive keyboard events.",
          "parameters": [
            {
              "name": "flag",
              "type": "boolean",
              "notes": "The flag to set.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setWidth": {
          "notes": "Sets the width of the element on the screen. (In pixels)\\n**NOTE**: If the element is set to stay on the screen, the width is capped.",
          "parameters": [
            {
              "name": "width",
              "type": "number",
              "notes": "The width to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setWidthAndParentWidth": {
          "notes": "Sets the width of the element and all parent elements up to their root element. (In pixels)",
          "parameters": [
            {
              "name": "width",
              "type": "number",
              "notes": "The width to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setX": {
          "notes": "Sets the x-coordinate of the element on the screen. (In pixels)\\n**NOTE**: If the element is set to stay on the screen, the maximum x coordinate is capped.",
          "parameters": [
            {
              "name": "x",
              "type": "number",
              "notes": "The x-coordinate to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "setXScroll": {
          "notes": "Sets the x-offset of the horizontal scrollbar and the contents of the scrollbar-pane. If the given value falls outside the range of the horizontal scrollbar and its contents, the value set will be clamped to the range. ",
          "parameters": [
            {
              "name": "value",
              "type": "number",
              "notes": "The value to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "setY": {
          "notes": "Sets the y-coordinate of the element on the screen. (In pixels)\\n**NOTE**: If the element is set to stay on the screen, the maximum y coordinate is capped.",
          "parameters": [
            {
              "name": "y",
              "type": "number",
              "notes": "The y-coordinate to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "nullable": false
          }
        },
        "setYScroll": {
          "notes": "Sets the y-offset of the vertical scrollbar and the contents of the scrollbar-pane. If the given value falls outside the range of the vertical scrollbar and its contents, the value set will be clamped to the range. ",
          "parameters": [
            {
              "name": "value",
              "type": "number",
              "notes": "The value to set. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "shrinkX": {
          "notes": "Shrinks the element's width by a given value.",
          "parameters": [
            {
              "name": "value",
              "type": "number",
              "notes": "The value to shrink the width. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "shrinkY": {
          "notes": "Shrinks the element's height by a given value.",
          "parameters": [
            {
              "name": "value",
              "type": "number",
              "notes": "The height to shrink. (In pixels)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "stayOnSplitScreen": {
          "notes": "Sets if the element stays on a split-screen for a player, clamping the element between the ranges for the player's screen-space.\\n**NOTE**: If the amount of players is one, then the method does nothing.",
          "parameters": [
            {
              "name": "playerIndex",
              "type": "number",
              "notes": "The player's index value. (between 0 and 3)",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "suspendStencil": {
          "notes": "Suspends (or halts) the stencil used to clip render / draw calls from rendering outside the set box boundary of the element. Once suspended, anything drawn outside the boundary will show.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "toString": {
          "returns": {
            "type": "string",
            "notes": "A formally-wrapped for **tostring(self)** using the** getUIName()** to formally name the printed result. ",
            "nullable": false
          }
        },
        "update": {
          "notes": "Triggered every updated tick in the game's simulation.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "updateScrollbars": {
          "notes": "Updates the horizontal and vertical scrollbars, clamping the vertical scrollbar if outside of the content-range.",
          "returns": {
            "type": "void",
            "notes": "",
            "nullable": false
          }
        },
        "wrapInCollapsableWindow": {
          "notes": "Wraps the element in a window class instance. (By Default **ISCollapsableWindow**)",
          "parameters": [
            {
              "name": "title",
              "type": "string",
              "notes": "The title of the window.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "isResizable",
              "type": "boolean",
              "notes": "True if the window can be resized by the player.",
              "optional": false,
              "nullable": false
            },
            {
              "name": "subClass",
              "type": "any",
              "notes": "If set, the class object is used instead. If nil, **ISCollapsableWindow** is used.",
              "optional": false,
              "nullable": false
            }
          ],
          "returns": {
            "type": "ISCollapsableWindow | any",
            "notes": "The instance of the wrapping class.",
            "nullable": false
          }
        }
      },
      "mutable": false
    }
  },
  "tables": {
    "ProgressBarColor": {
      "notes": "A generic color struct with r, g, b, and a values between 0.0 and 1.0.",
      "fields": {
        "a": {
          "type": "number",
          "notes": "The alpha channel value. (0.0 -> 1.0)",
          "nullable": false
        },
        "b": {
          "type": "number",
          "notes": "The blue color channel value. (0.0 -> 1.0)",
          "nullable": false
        },
        "g": {
          "type": "number",
          "notes": "The green color channel value. (0.0 -> 1.0)",
          "nullable": false
        },
        "r": {
          "type": "number",
          "notes": "The red color channel value. (0.0 -> 1.0)",
          "nullable": false
        }
      }
    }
  }
}